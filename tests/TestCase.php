<?php

namespace Tests;

use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Support\Facades\Event;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected function assertClassUsesTrait($trait, $class)
    {
        $this->assertArrayHasKey(
            $trait,
            class_uses($class),
            "The class {$class} must use trait {$trait} "
        );
    }

    /**
     * @param string $channelName
     * @param Event  $event
     * @return void
     */
    protected function assertEventChannelName($channelName, $event)
    {
        $this->assertEquals(
            $channelName,
            $event->broadcastOn()->name
        );
    }

    /**
     * @param $channelType
     * @param $event
     * @return void
     */
    protected function assertEventChannelType($channelType, $event)
    {
        $types = array(
            'public' => \Illuminate\Broadcasting\Channel::class,
            'private' => \Illuminate\Broadcasting\PrivateChannel::class,
            'presence' => \Illuminate\Broadcasting\PresenceChannel::class
        );

        $this->assertEquals(
            $types[$channelType],
            get_class($event->broadcastOn())
        );
    }

    protected function assertDontBroadcastToCurrentUser($event, $socketId = 'socket-id')
    {
        $this->assertInstanceOf(ShouldBroadcast::class, $event);

        $this->assertEquals(
            $socketId, //Generated by Broadcast::shouldReceive('socket')->andReturn('socket-id');
            $event->socket,
            'The event '. get_class($event).' must call the method "dontBroadcastToCurrentUser" in the constructor.'
        );
    }
}
